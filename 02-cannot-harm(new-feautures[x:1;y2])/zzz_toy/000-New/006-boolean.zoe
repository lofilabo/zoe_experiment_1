oh look !


^.^ We define these 3 of Type boolean
I define my_bool1 =oftype==> zoe_boolean
I define my_bool2 =oftype==> zoe_boolean
I define my_boolZ =oftype==> zoe_boolean

my_bool1 <=== "True"
my_bool2 <=== "False"
pencil my_bool1

^.^{
0. NEXT STEP"
	Figure out how to Print a Boolean!
	Maybe....IF!

	YES!
	* study IF
	* check IF my_bool1 = "True"
}^.^



^.^{
1. REFERENCE.

	BOTH OF <x> [AN] <y>        BTW  and: WIN iff x=WIN, y=WIN
	EITHER OF <x> [AN] <y>      BTW  or: FAIL iff x=FAIL, y=FAIL
	WON OF <x> [AN] <y>         BTW  xor: FAIL if x=y
	NOT <x>                     BTW unary negation: WIN if x=FAIL
	ALL OF <x> [AN] <y> … MKAY  BTW infinite arity AND
	ANY OF <x> [AN] <y> … MKAY  BTW infinite arity OR

1.5 EXAMPLE

	<any_expression>
	O RLY?
	   YA RLY
	      <code to execute if above condition is true>
	   NO WAI
	      <code to execute in this block>
	OIC

	All of the above statements can be written in the same line separated by commas like −

	 BOTH SAEM NAMES AN "Name", O RLY?
	   YA RLY, VISIBLE "My name is ABCD"
	   NO WAI, VISIBLE "Your name is ABCD"
	 OIC
	 
}^.^


^.^{
2. Next Step:
	Work out my_boolZ!
	And print the Result! 

	my_boolZ <=== zoe_both my_bool1 zoe_do_maths_with my_bool2
	^.^ pencil my_boolZ

	my_boolZ <=== zoe_either my_bool1 zoe_do_maths_with my_bool2
	^.^ pencil my_boolZ
}^.^

I see !

